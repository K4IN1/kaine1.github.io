<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ubuntu下使用terminator或其他终端软件并替换默认终端和右键菜单</title>
    <link href="/2024/07/05/Ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8terminator%E6%88%96%E5%85%B6%E4%BB%96%E7%BB%88%E7%AB%AF%E8%BD%AF%E4%BB%B6%E5%B9%B6%E6%9B%BF%E6%8D%A2%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF%E5%92%8C%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
    <url>/2024/07/05/Ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8terminator%E6%88%96%E5%85%B6%E4%BB%96%E7%BB%88%E7%AB%AF%E8%BD%AF%E4%BB%B6%E5%B9%B6%E6%9B%BF%E6%8D%A2%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF%E5%92%8C%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu下使用terminator或其他终端软件并替换默认终端和右键菜单"><a href="#Ubuntu下使用terminator或其他终端软件并替换默认终端和右键菜单" class="headerlink" title="Ubuntu下使用terminator或其他终端软件并替换默认终端和右键菜单"></a>Ubuntu下使用terminator或其他终端软件并替换默认终端和右键菜单</h1><p>Ubuntu默认所使用的gnome-terminal，虽然简洁好用，但是不能分多个窗口<br>我个人在使用过程中会出现输入卡顿，补全卡顿等问题，有时候很烦心<br>使用一个外观更加现代，功能更加丰富，性能强大的Terminal，可以提高我们的效率</p><span id="more"></span><h2 id="请注意区分"><a href="#请注意区分" class="headerlink" title="请注意区分"></a>请注意区分</h2><p>Terminal与Shell是不同的</p><ul><li>Terminal是用来显示Shell，与Shell交互的界面  </li><li>Shell则是系统内核Core外层，与Core进行交互的一层</li></ul><p>在GUI环境下理论上不存在真正的Terminal，所以你看到这些TerminalGUI往往都会带有Simulator的字样<br>在22.04版本中，需要使用<code>Ctrl+Alt+F3/4/5/6</code>来进入不同Ternimal，这个才是Ubuntu真正的终端。<br>退出请尝试<code>Ctrl+Alt+F1/2/7</code>，或在终端输入用户名密码登陆后尝试<code>starx</code>命令  </p><h2 id="安装你选择的终端软件"><a href="#安装你选择的终端软件" class="headerlink" title="安装你选择的终端软件"></a>安装你选择的终端软件</h2><p>例如安装Terminator</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install terminator<br></code></pre></td></tr></table></figure><p>或者从.deb .AppImage 等软件包安装<br>请确保你知道软件安装的位置</p><h2 id="替换默认终端的快捷键"><a href="#替换默认终端的快捷键" class="headerlink" title="替换默认终端的快捷键"></a>替换默认终端的快捷键</h2><p>使用<code>Ctrl+Alt+T</code>就可以快捷打开终端<br>有的终端软件在安装之后就会自动替换该快捷键<br>如果没有替换，请使用如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">gsettings set org.gnome.desktop.default-applications.terminal exec /usr/bin/terminator<br>gsettings set org.gnome.desktop.default-applications.terminal exec-arg &quot;-x&quot;<br></code></pre></td></tr></table></figure><p>请把<code>exec</code>后的路径更换成你自己终端的路径<br>要还原初始，请使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">gsettings reset org.gnome.desktop.default-applications.terminal exec<br>gsettings reset org.gnome.desktop.default-applications.terminal exec-arg<br></code></pre></td></tr></table></figure><p>也可以通过间接启动的方式  </p><p>1.打开Gnome-terminal，转到你的Profile预设，选择Command命令选项卡<br>2.勾选运行自定义命令而不是Shell<br>3.在自定义命令中键入运行你的Termimal 例如<code>terminator</code>  </p><p>如果需要恢复，请使用<code>gnome-terminal --preferences</code>打开选项卡，并取消勾选上述选项</p><h2 id="替换右键菜单"><a href="#替换右键菜单" class="headerlink" title="替换右键菜单"></a>替换右键菜单</h2><p>如果是按照上述第二种方法，此时右键菜单应该已经可用<br>选择在此打开Terminal即可打开你的自定义终端<br>如果没有生效，可以使用这个nautilus<a href="https://github.com/Stunkymonkey/nautilus-open-any-terminal">插件</a><br>这个插件会增加一个新的右键菜单，在当前目录下启动你的终端<br>该插件同时也支持Caja文件管理器，几乎支持所有的主流终端软件，但是需要自己做一些简单的配置<br>建议从源代码安装，安装完成后<code>nautilus -q</code>重新启动文件管理器即可<br>要配置该拓展，需要使用命令行或者dconf-editor<br>通过编辑<code>com.github.stunkymonkey.nautilus-open-any-terminal</code>中的四个不同参数即可  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">gsettings set com.github.stunkymonkey.nautilus-open-any-terminal terminal alacritty<br>gsettings set com.github.stunkymonkey.nautilus-open-any-terminal keybindings &#x27;&lt;Ctrl&gt;&lt;Alt&gt;t&#x27;<br>gsettings set com.github.stunkymonkey.nautilus-open-any-terminal new-tab true<br>gsettings set com.github.stunkymonkey.nautilus-open-any-terminal flatpak system<br></code></pre></td></tr></table></figure><p>建议参考Github原文章的参数 </p><p>2024.7.5</p><p>15:43</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用GitHub Pages和Hexo搭建个人博客</title>
    <link href="/2024/06/25/Pages%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/06/25/Pages%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="使用GitHub-Pages与Hexo搭建个人博客"><a href="#使用GitHub-Pages与Hexo搭建个人博客" class="headerlink" title="使用GitHub Pages与Hexo搭建个人博客"></a>使用GitHub Pages与Hexo搭建个人博客</h1><p>看了许多利用GitHub Pages建立个人博客的例子，使用的比较多的就是<strong>jkeyll</strong>和<strong>Hexo</strong>，最终选择了使用<strong>Hexo</strong>搭建我的博客，遵循先搭建再部署的原则</p><span id="more"></span><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><p>参考<a href="https://hexo.io/zh-cn/">Hexo官方网站</a>，需要先安装以下应用程序  </p><ul><li><strong><a href="https://nodejs.org/">Node.js</a></strong>  </li><li><strong><a href="https://git-scm.com/">Git</a></strong></li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>不同的操作系统拥有不同的安装程序  </p><ul><li>Windows一般使用<a href="https://git-scm.com/download/win">安装包</a>  </li><li>Mac系统可以使用Homebrew或者对应安装程序</li><li>Linux则可以通过apt&#x2F;yum包管理器来进行安装<br>在控制台中键入<br><code>sudo apt-get install git-core</code><br>或者<br><code>sudo yum install git-core</code></li></ul><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>直接访问<a href="https://nodejs.org/zh-cn/download/">Node.js官方提供的下载网址</a><br>选择你自己的操作系统和版本，按提示操作即可<br>这里建议Windows和Mac使用安装程序安装<br>Linux使用nvm进行包管理（安装完记得source ~&#x2F;.bashrc）</p><h2 id="安装Hexo并建立项目"><a href="#安装Hexo并建立项目" class="headerlink" title="安装Hexo并建立项目"></a>安装Hexo并建立项目</h2><p>直接使用npm安装Hexo  </p><pre><code class="hljs">npm install -g hexo-cli  </code></pre><p>然后新建一个空目录，用于Hexo的初始化  </p><pre><code class="hljs">mkdir mainhexo init maincd mainnpm install</code></pre><p>这样你的Hexo项目就建立好了，各文件的作用请参考<a href="https://hexo.io/zh-cn/docs/setup">文档</a><br>随后就可以为你的Blog选一个主题了，官方提供了一个<a href="https://hexo.io/themes/">主题列表</a>，你可以在里面挑选自己喜欢的样式<br>当然也可以直接Google或者Github搜索，有一些主题应该是没有被收录的<br>随后进入主题的网站按照教程来即可，一般导入主题方法如下<br>本次采用<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid主题</a>  </p><p><strong>1. 下载解压</strong><br>下载主题文件并解压到themes目录下，将解压出的文件夹命名为主题名<br><strong>2. 修改内容</strong><br>修改Hexo目录中的_config.yml  </p><pre><code class="hljs">theme：主题名  language: zh-CN</code></pre><p><strong>3.其他事项</strong><br>有些主题需要自己创建部分内容，例如Fluid主题就需要自己创建About页面</p><h2 id="尝试本地运行"><a href="#尝试本地运行" class="headerlink" title="尝试本地运行"></a>尝试本地运行</h2><p>在项目目录，例如main下输入  </p><pre><code class="hljs">hexo g或者hexo generate</code></pre><p>该命令会生成对应的静态文件在public中<br>控制台中输入  </p><pre><code class="hljs">hexo s或者hexo server</code></pre><p>即可启动服务<br>在浏览器中打开对应网址<a href="http://localhost:4000/">http://localhost:4000</a>即可预览博客<br>每次修改博客内容或者配置想要预览的时候，请先使用<code>hexo clean</code>清除本地文件，然后重新生成并启动服务  </p><h2 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h2><p>使用<code>hexo new [layout] &lt;title&gt;</code>就可以新建一个博客页面了。<br>其中Layout为博客的布局，默认支持post，page，draft三种，储存在scaffolds文件夹下,不同布局的文章会储存在不同的位置下  </p><table><thead><th>布局</th><th>路径</th></thead><tbody><tr><td>post</td><td>source/_posts</td><tr><td>page</td><td>source/</td><tr><td>draft</td><td>source/_drafts</td><tr></tbody></table>  <p>通过编辑_config.yaml文件中new_post_name，可以更改默认的文件名称，添加时间标签可以让我们更加方便管理博客,具体的更改方式可以参考<a href="https://hexo.io/zh-cn/docs/writing#%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0">这里</a><br>添加一篇新的post</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new post &lt;your_title&gt;<br></code></pre></td></tr></table></figure><p>随后你的source&#x2F;_posts文件夹中就会出现这样一个.md文件，依照正常Html或者Markdown格式就可以撰写文章了<br>.md文件上方有用<code>---</code>分割的区域<br>这是文章的扉页，是front-matter提供的功能，可以用来自定义文章的各类变量 </p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td><a href="/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td><code>title</code></td><td>标题</td><td>文章的文件名</td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td><code>true</code></td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td><td><code>null</code></td></tr><tr><td><code>excerpt</code></td><td>纯文本的页面摘要。使用 <a href="/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">该插件</a> 来格式化文本</td><td></td></tr><tr><td><code>disableNunjucks</code></td><td>启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>/<code>&#123;% %&#125;</code> 和 <a href="/zh-cn/docs/tag-plugins">标签插件</a> 的渲染功能</td><td>false</td></tr><tr><td><code>lang</code></td><td>设置语言以覆盖 <a href="/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动检测</a></td><td>继承自 <code>_config.yml</code></td></tr><tr><td><code>published</code></td><td>文章是否发布</td><td>对于 <code>_posts</code> 下的文章为 <code>true</code>，对于 <code>_draft</code> 下的文章为 <code>false</code></td></tr></tbody></table>  <p>有关分类与标签编辑，请参照<a href="https://hexo.io/zh-cn/docs/front-matter#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE">这里</a></p><h1 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h1><p>建立博客，编辑完成我们的页面，就可以部署到服务器上，这样就能在互联网上访问我们自己的博客了<br>本着免费够用的原则，选择GitHub Pages进行部署</p><h2 id="安装部署工具"><a href="#安装部署工具" class="headerlink" title="安装部署工具"></a>安装部署工具</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>一行搞定</p><h2 id="设置GitHub-Pages"><a href="#设置GitHub-Pages" class="headerlink" title="设置GitHub Pages"></a>设置GitHub Pages</h2><p>新建一个仓库，命名为<code>用户名.gitbub.io</code><br>仓库中会默认有一个index.md文件，我们需要的是仓库的克隆地址，在Clone选项卡中复制即可<br>转到仓库设置页面，在Pages选项卡中选择你的页面对应的分支，一般选择默认main分支即可。</p><p>建议为仓库和本机配置SSH密钥，可以提高安全性，方便我们修改或上传文档。具体操作清参阅Github<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">教程</a></p><h2 id="在-config-yml-中修改参数"><a href="#在-config-yml-中修改参数" class="headerlink" title="在_config.yml 中修改参数"></a>在_config.yml 中修改参数</h2><p>将deploy项目修改为如下形式</p><pre><code class="hljs">deploy:  type: git  repo: https://github.com/&lt;username&gt;/&lt;project&gt;  branch: main</code></pre><p>这里<code>repo</code>是你自己仓库的HTTP或SSH地址，结尾是.git,请不要与浏览器地址混淆<br><code>branch</code> 选择你在上面Pages页面里设置的分支<br>除此以外，还需要在Git中设置你的name和email，请参考<a href="https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup">ProGit</a>，或者直接利用Vscode的源代码管理功能&#x2F;Git插件来管理Git与Github账户</p><p>此时运行  </p><pre><code class="hljs">hexo cleanhexo ghexo d</code></pre><p>即可将自己的网站部署到对应Github分支，访问你自己的主页<code>&lt;GitHub 用户名&gt;.github.io</code>即可查看结果<br>部署需要时间，博客的更新并不是部署了就会立即更新，请耐心等待。</p><h2 id="Git连接问题"><a href="#Git连接问题" class="headerlink" title="Git连接问题"></a>Git连接问题</h2><p>如果你使用代理连接Github，那么很有可能会发生连接失败的问题<br>在上述的<a href="#%E8%AE%BE%E7%BD%AEgithub-pages">SSH配置</a>中，Github官方文档提到了测试SSH连接的操作步骤，请以该步骤的结果作为参考<br>如果提示SSH连接失败，那么可能是端口的问题<br>在默认的.ssh文件夹中新建文件，键入以下内容</p><pre><code class="hljs">Host github.comHostName ssh.github.comUser gitPort 22</code></pre><p>将文件重命名为config，SSH连接应该会恢复</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>以上就是我搭建个人博客经历的大致历程。<br>写完这篇文章作为博客的第一篇文章，我的心里还是挺开心的，毕竟自己搭起来了一个小博客，以后可以存放我自己的乱七八糟的东西。说不定以后可以买一个域名重定向到这里，让我的文章能被更多的人看到，帮助到更多的人。</p><p>2024.6.26<br>19:10</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>GitHub Pages</tag>
      
      <tag>Hexo</tag>
      
      <tag>Vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/06/25/hello-world/"/>
    <url>/2024/06/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
